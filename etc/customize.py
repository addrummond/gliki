#!/usr/bin/env python


"""
Autogenerated by CHEETAH: The Python-Powered Template Engine
 CHEETAH VERSION: 1.0
 Generation time: Mon Jul  9 18:51:30 2007
   Source file: etc/customize.tmpl
   Source file last modified: Sat Jul  7 19:15:45 2007
"""

__CHEETAH_genTime__ = 'Mon Jul  9 18:51:30 2007'
__CHEETAH_src__ = 'etc/customize.tmpl'
__CHEETAH_version__ = '1.0'

##################################################
## DEPENDENCIES

import sys
import os
import os.path
from os.path import getmtime, exists
import time
import types
import __builtin__
from Cheetah.Template import Template
from Cheetah.DummyTransaction import DummyTransaction
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
import links
import htmlutils

##################################################
## MODULE CONSTANTS

try:
    True, False
except NameError:
    True, False = (1==1), (1==0)
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time

##################################################
## CLASSES

class customize(Template):
    """
    
    Autogenerated by CHEETAH: The Python-Powered Template Engine
    """

    ##################################################
    ## GENERATED METHODS


    def __init__(self, *args, **KWs):
        """
        
        """

        Template.__init__(self, *args, **KWs)

    def article_link(self,
            article_name,
            gloss=None,
            trans=None,
            VFFSL=valueFromFrameOrSearchList,
            VFN=valueForName):


        """
        Generated from #def article_link($article_name, $gloss=None) at line 19, col 1.
        """

        if not trans: trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            dummyTrans = True
        else: dummyTrans = False
        write = trans.response().write
        SL = self._searchList
        globalSetVars = self._globalSetVars
        filter = self._currentFilter
        
        ########################################
        ## START - generated method body
        
        write('<a class="article_ref" href="')
        write(filter( links.article_link(article_name)))
        write('">')
        if VFFSL(SL,"gloss",True) :
            __v =  VFFSL(SL,"gloss",True) 
            if __v is not None: write(filter(__v))
        else:
            __v =  VFFSL(SL,"article_name",True)
            if __v is not None: write(filter(__v))
        write('</a>')
        
        ########################################
        ## END - generated method body
        
        return dummyTrans and trans.response().getvalue() or ""
        

    def external_link(self,
            url,
            gloss=None,
            trans=None,
            VFFSL=valueFromFrameOrSearchList,
            VFN=valueForName):


        """
        Generated from #def external_link($url, $gloss=None) at line 21, col 1.
        """

        if not trans: trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            dummyTrans = True
        else: dummyTrans = False
        write = trans.response().write
        SL = self._searchList
        globalSetVars = self._globalSetVars
        filter = self._currentFilter
        
        ########################################
        ## START - generated method body
        
        write('<a class="external_link" href="')
        __v = VFFSL(SL,"url",True)
        if __v is not None: write(filter(__v, rawExpr='$url')) # from line 21, col 70.
        write('">')
        if VFFSL(SL,"gloss",True) :
            __v =  VFFSL(SL,"gloss",True) 
            if __v is not None: write(filter(__v))
        else:
            __v =  VFFSL(SL,"url",True)
            if __v is not None: write(filter(__v))
        write('</a>')
        
        ########################################
        ## END - generated method body
        
        return dummyTrans and trans.response().getvalue() or ""
        

    def create_account_link(self,
            gloss=None,
            trans=None,
            VFFSL=valueFromFrameOrSearchList,
            VFN=valueForName):


        """
        Generated from #def create_account_link($gloss=None) at line 23, col 1.
        """

        if not trans: trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            dummyTrans = True
        else: dummyTrans = False
        write = trans.response().write
        SL = self._searchList
        globalSetVars = self._globalSetVars
        filter = self._currentFilter
        
        ########################################
        ## START - generated method body
        
        write('<a class="action" href="')
        write(filter( links.create_account_link()))
        write('">')
        if VFFSL(SL,"gloss",True) :
            __v =  VFFSL(SL,"gloss",True) 
            if __v is not None: write(filter(__v))
        else:
            __v =  links.create_account_link()
            if __v is not None: write(filter(__v))
        write('</a>')
        
        ########################################
        ## END - generated method body
        
        return dummyTrans and trans.response().getvalue() or ""
        

    def login_link(self,
            gloss=None,
            trans=None,
            VFFSL=valueFromFrameOrSearchList,
            VFN=valueForName):


        """
        Generated from #def login_link($gloss=None) at line 25, col 1.
        """

        if not trans: trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            dummyTrans = True
        else: dummyTrans = False
        write = trans.response().write
        SL = self._searchList
        globalSetVars = self._globalSetVars
        filter = self._currentFilter
        
        ########################################
        ## START - generated method body
        
        write('<a class="action" href="')
        write(filter( links.login_link()))
        write('">')
        if VFFSL(SL,"gloss",True) :
            __v =  VFFSL(SL,"gloss",True) 
            if __v is not None: write(filter(__v))
        else:
            __v =  links.login_link()
            if __v is not None: write(filter(__v))
        write('</a>')
        
        ########################################
        ## END - generated method body
        
        return dummyTrans and trans.response().getvalue() or ""
        

    def WEB_PAGE_ENCODING(self,
            trans=None,
            VFFSL=valueFromFrameOrSearchList,
            VFN=valueForName):


        """
        Generated from #def WEB_PAGE_ENCODING at line 27, col 1.
        """

        if not trans: trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            dummyTrans = True
        else: dummyTrans = False
        write = trans.response().write
        SL = self._searchList
        globalSetVars = self._globalSetVars
        filter = self._currentFilter
        
        ########################################
        ## START - generated method body
        
        write('UTF-8')
        
        ########################################
        ## END - generated method body
        
        return dummyTrans and trans.response().getvalue() or ""
        

    def LICENSE_BOILERPLATE_XHTML(self,
            trans=None,
            VFFSL=valueFromFrameOrSearchList,
            VFN=valueForName):


        """
        Generated from #def LICENSE_BOILERPLATE_XHTML at line 34, col 1.
        """

        if not trans: trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            dummyTrans = True
        else: dummyTrans = False
        write = trans.response().write
        SL = self._searchList
        globalSetVars = self._globalSetVars
        filter = self._currentFilter
        
        ########################################
        ## START - generated method body
        
        write('<p>\n    Contributions are licensed under the\n    ')
        __v = VFFSL(SL,"external_link",False)("http://creativecommons.org/licenses/by-sa/3.0/", u"Creative Commons Attribution Share Alike License")
        if __v is not None: write(filter(__v, rawExpr='$external_link("http://creativecommons.org/licenses/by-sa/3.0/", u"Creative Commons Attribution Share Alike License")')) # from line 37, col 5.
        write('''.
    Anyone can edit articles at any time.
</p>
''')
        
        ########################################
        ## END - generated method body
        
        return dummyTrans and trans.response().getvalue() or ""
        

    def REVISION_NUMBERING_INFO_XHTML(self,
            trans=None,
            VFFSL=valueFromFrameOrSearchList,
            VFN=valueForName):


        """
        Generated from #def REVISION_NUMBERING_INFO_XHTML at line 45, col 1.
        """

        if not trans: trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            dummyTrans = True
        else: dummyTrans = False
        write = trans.response().write
        SL = self._searchList
        globalSetVars = self._globalSetVars
        filter = self._currentFilter
        
        ########################################
        ## START - generated method body
        
        write("<p>\n    You might want to read about the wiki's\n    ")
        __v = VFFSL(SL,"article_link",False)(u"Revision numbering", u"revision numbering system")
        if __v is not None: write(filter(__v, rawExpr='$article_link(u"Revision numbering", u"revision numbering system")')) # from line 48, col 5.
        write('.\n</p>\n')
        
        ########################################
        ## END - generated method body
        
        return dummyTrans and trans.response().getvalue() or ""
        

    def LOGO_IMG_URL(self,
            trans=None,
            VFFSL=valueFromFrameOrSearchList,
            VFN=valueForName):


        """
        Generated from #def LOGO_IMG_URL at line 57, col 1.
        """

        if not trans: trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            dummyTrans = True
        else: dummyTrans = False
        write = trans.response().write
        SL = self._searchList
        globalSetVars = self._globalSetVars
        filter = self._currentFilter
        
        ########################################
        ## START - generated method body
        
        write('/logo.png')
        
        ########################################
        ## END - generated method body
        
        return dummyTrans and trans.response().getvalue() or ""
        

    def LOGO_IMG_ALT(self,
            trans=None,
            VFFSL=valueFromFrameOrSearchList,
            VFN=valueForName):


        """
        Generated from #def LOGO_IMG_ALT at line 58, col 1.
        """

        if not trans: trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            dummyTrans = True
        else: dummyTrans = False
        write = trans.response().write
        SL = self._searchList
        globalSetVars = self._globalSetVars
        filter = self._currentFilter
        
        ########################################
        ## START - generated method body
        
        write('Gliki logo')
        
        ########################################
        ## END - generated method body
        
        return dummyTrans and trans.response().getvalue() or ""
        

    def ICON_URL(self,
            trans=None,
            VFFSL=valueFromFrameOrSearchList,
            VFN=valueForName):


        """
        Generated from #def ICON_URL at line 63, col 1.
        """

        if not trans: trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            dummyTrans = True
        else: dummyTrans = False
        write = trans.response().write
        SL = self._searchList
        globalSetVars = self._globalSetVars
        filter = self._currentFilter
        
        ########################################
        ## START - generated method body
        
        write('/favicon.ico')
        
        ########################################
        ## END - generated method body
        
        return dummyTrans and trans.response().getvalue() or ""
        

    def FRONT_PAGE_TITLE(self,
            trans=None,
            VFFSL=valueFromFrameOrSearchList,
            VFN=valueForName):


        """
        Generated from #def FRONT_PAGE_TITLE at line 67, col 1.
        """

        if not trans: trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            dummyTrans = True
        else: dummyTrans = False
        write = trans.response().write
        SL = self._searchList
        globalSetVars = self._globalSetVars
        filter = self._currentFilter
        
        ########################################
        ## START - generated method body
        
        write('Gliki')
        
        ########################################
        ## END - generated method body
        
        return dummyTrans and trans.response().getvalue() or ""
        

    def FRONT_PAGE_BODY_XHTML(self,
            trans=None,
            VFFSL=valueFromFrameOrSearchList,
            VFN=valueForName):


        """
        Generated from #def FRONT_PAGE_BODY_XHTML at line 69, col 1.
        """

        if not trans: trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            dummyTrans = True
        else: dummyTrans = False
        write = trans.response().write
        SL = self._searchList
        globalSetVars = self._globalSetVars
        filter = self._currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''<h1>Welcome to Gliki</h1>

<p>
Gliki is a wiki for generative linguistics.
The idea is for people to write articles collaberatively on topics which interest them.
You can write in whatever style you like, and on whatever topic.
Even topics outside linguistics altogether are OK, but
but the site has various features designed for linguists.
Currently, these mostly favor syntacticians:
numbered and glossed examples are supported,
and there is a utility for rendering labelled bracketings
as trees.
</p>
<p>
You can start editing any page in the Wiki (except this one) right now,
but you might want to
''')
        __v = VFFSL(SL,"create_account_link",False)(u"create an account")
        if __v is not None: write(filter(__v, rawExpr='$create_account_link(u"create an account")')) # from line 86, col 1.
        write('\nfirst,\nor ')
        __v = VFFSL(SL,"login_link",False)(u"log in")
        if __v is not None: write(filter(__v, rawExpr='$login_link(u"log in")')) # from line 88, col 4.
        write(''',
if you already have an account.
</p>
<p>
<b>For more detailed information about the site,
see the ''')
        __v = VFFSL(SL,"article_link",False)(u"Gliki")
        if __v is not None: write(filter(__v, rawExpr='$article_link(u"Gliki")')) # from line 93, col 9.
        write(' article and the list of\n')
        __v = VFFSL(SL,"article_link",False)(u"Useful links", u"list of useful links")
        if __v is not None: write(filter(__v, rawExpr='$article_link(u"Useful links", u"list of useful links")')) # from line 94, col 1.
        write('''.</b>
</p>
<p>
If you're new to wikis in general, you might want to read the
<a href="http://en.wikipedia.org/wiki/Wiki" class="external_link">Wikipedia article on wikis</a>.
</p>
''')
        __v = VFFSL(SL,"LICENSE_BOILERPLATE_XHTML",True)
        if __v is not None: write(filter(__v, rawExpr='$LICENSE_BOILERPLATE_XHTML')) # from line 100, col 1.
        write('''
<p>
Gliki uses custom software which is currently in the early stages of development,
so there are a few missing features, and probably some bugs.
If something needs fixing,
add a note to the ''')
        __v = VFFSL(SL,"article_link",False)(u"Bugs")
        if __v is not None: write(filter(__v, rawExpr='$article_link(u"Bugs")')) # from line 105, col 19.
        write(''' page.
</p>
<p>
Gliki is written in
''')
        __v = VFFSL(SL,"external_link",False)(u"http://www.python.org", u"Python")
        if __v is not None: write(filter(__v, rawExpr='$external_link(u"http://www.python.org", u"Python")')) # from line 109, col 1.
        write('\nusing ')
        __v = VFFSL(SL,"external_link",False)(u"http://www.sqlite.org", u"SQLite")
        if __v is not None: write(filter(__v, rawExpr='$external_link(u"http://www.sqlite.org", u"SQLite")')) # from line 110, col 7.
        write('''
for the database.
</p>
''')
        
        ########################################
        ## END - generated method body
        
        return dummyTrans and trans.response().getvalue() or ""
        

    def BLOCKED_BY_USERNAME_MESSAGE_XHTML(self,
            trans=None,
            VFFSL=valueFromFrameOrSearchList,
            VFN=valueForName):


        """
        Generated from #def BLOCKED_BY_USERNAME_MESSAGE_XHTML at line 116, col 1.
        """

        if not trans: trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            dummyTrans = True
        else: dummyTrans = False
        write = trans.response().write
        SL = self._searchList
        globalSetVars = self._globalSetVars
        filter = self._currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''<p>
    Sorry, your account has been blocked.
    If you think this is a mistake,
    <a href="mailto:webmaster@gliki.whsites.net">contact the webmaster</a>.
</p>
''')
        
        ########################################
        ## END - generated method body
        
        return dummyTrans and trans.response().getvalue() or ""
        

    def BLOCKED_BY_IP_MESSAGE_XHTML(self,
            trans=None,
            VFFSL=valueFromFrameOrSearchList,
            VFN=valueForName):


        """
        Generated from #def BLOCKED_BY_IP_MESSAGE_XHTML at line 123, col 1.
        """

        if not trans: trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            dummyTrans = True
        else: dummyTrans = False
        write = trans.response().write
        SL = self._searchList
        globalSetVars = self._globalSetVars
        filter = self._currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''<p>
Sorry, your IP address has been blocked.
Blocking by IP address is not very reliable,
and you may well have been blocked by accident.
If you think this is the case,
<a href="mailto:webmaster@gliki.whsites.net">contact the webmaster</a>.
</p>
''')
        
        ########################################
        ## END - generated method body
        
        return dummyTrans and trans.response().getvalue() or ""
        

    def __TEXT__(self,
            trans=None,
            VFFSL=valueFromFrameOrSearchList,
            VFN=valueForName):


        """
        Generated from #def __TEXT__ at line 137, col 1.
        """

        if not trans: trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            dummyTrans = True
        else: dummyTrans = False
        write = trans.response().write
        SL = self._searchList
        globalSetVars = self._globalSetVars
        filter = self._currentFilter
        
        ########################################
        ## START - generated method body
        
        write(' ')
        
        ########################################
        ## END - generated method body
        
        return dummyTrans and trans.response().getvalue() or ""
        

    def respond(self,
            trans=None,
            VFFSL=valueFromFrameOrSearchList,
            VFN=valueForName):


        """
        This is the main method generated by Cheetah
        """

        if not trans: trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            dummyTrans = True
        else: dummyTrans = False
        write = trans.response().write
        SL = self._searchList
        globalSetVars = self._globalSetVars
        filter = self._currentFilter
        
        ########################################
        ## START - generated method body
        
        #  SEE END OF FILE FOR LICENSE CONDITIONS.
        write('\n')
        # 
        #  Instructions for basic customization.
        #  -------------------------------------
        # 
        #  1) Change the definitions below.
        #  2) Add any necessary static files (e.g. images) to the 'static' directory.
        #  3) Possibly edit config.py, but this should not normally be necessary.
        # 
        write('\n\n')
        # 
        #  DON'T EDIT THIS CODE.
        # 
        write('''











''')
        # 
        #  CHANGE THE FOLLOWING DEFINITIONS.
        # 
        write('''


''')
        #  Comment out this def if you don't want information on revision numbering to
        #  be given in appropriate places.
        write('\n\n')
        #  Comment out both defs if you don't want a logo.
        #  The root for static files is the 'static' directory in the main Gliki
        #  directory. So, if the URL is "/XXX.png", the png file should be
        #  static/XXX.png.
        write('''


''')
        #  Comment out this def if you don't want a favorites icon.
        #  As with the logo (see previous comment), the icon file should be in the
        #  'static' directory.
        write('''


''')
        #  Sets the title of the front page and the title appended to all other pages.
        write('\n')
        #  XHTML to go between <body>...</body> on the front page.
        write('''



''')
        # 
        #  DO NOT EDIT THIS CODE.
        # 
        write('\n')
        __v = VFFSL(SL,"__TEXT__",True)
        if __v is not None: write(filter(__v, rawExpr='$__TEXT__')) # from line 138, col 1.
        write('''


''')
        # 
        #  License conditions
        #  ------------------
        # 
        #  Copyright (C) 2007 Alex Drummond <a.d.drummond@gmail.com>
        # 
        #  This program is free software; you can redistribute it and/or
        #  modify it under the terms of the GNU General Public License
        #  as published by the Free Software Foundation; either version 2
        #  of the License, or (at your option) any later version.
        # 
        #  This program is distributed in the hope that it will be useful,
        #  but WITHOUT ANY WARRANTY; without even the implied warranty of
        #  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        #  GNU General Public License for more details.
        # 
        #  You should have received a copy of the GNU General Public License
        #  along with this program; if not, write to the Free Software
        #  Foundation, Inc., 51 Franklin Street, Fifth Floor,
        #  Boston, MA  02110-1301, USA.
        write('\n')
        
        ########################################
        ## END - generated method body
        
        return dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## GENERATED ATTRIBUTES


    __str__ = respond

    _mainCheetahMethod_for_customize= 'respond'


# CHEETAH was developed by Tavis Rudd, Mike Orr, Ian Bicking and Chuck Esterbrook;
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org

##################################################
## if run from command line:
if __name__ == '__main__':
    customize().runAsMainProgram()

